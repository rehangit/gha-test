name: â™º deploy to env

on:
  workflow_call:
    inputs:
      env:
        type: string
        description: Environment to deploy to. One of [dev, stg, int, prod]
        required: true

jobs:
  build:
    uses: ./.github/workflows/_build.yml
    with:
      upload-env: ${{ inputs.env }}
    secrets: inherit

  tf:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: ${{ inputs.env }}
    env:
      env: ${{ inputs.env }}
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Github context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo Release Tag=${{ github.event.release.tag_name }}
        shell: bash

      - name: Check tag conditions
        if: inputs.env != 'dev'
        env:
          GH_TOKEN: ${{ github.token }}
          REPONAME: ${{ github.repository }}
        run: |
          tag_name=$GITHUB_REF_NAME
          release_tag=$(gh api repos/$REPONAME/releases | jq --arg tag "$tag_name" '.[] | .tag_name | select( . == $tag )' | tr -d '"')
          pkg_version=$(jq '.version' package.json | tr -d '"') # read package version without quotes
          tag_version=$(echo $tag_name | sed -E 's/v([0-9]+\.[0-9]+\.[0-9]+).*/\1/') # extract version from tag
          tag_env=$(echo $tag_name | sed -E 's/v[0-9]+\.[0-9]+\.[0-9]+-?(stg|int).*/\1/') # extract versienv suffix from tag
          echo "tag_name=$tag_name; tag_version=$tag_version; pkg_version=$pkg_version; tag_env=$tag_env; release_tag=$release_tag"

          # Check if package version matches tag version
          [ "$pkg_version" = "$tag_version" ] || { echo "Package version ($pkg_version) must match tag version: $tag_version"; exit 1; }

          # Check if tag environment matches workflow environment
          [ "$env" = "prod" ] && [ "$tag_env" = "$tag_name" ] || [ "$tag_env" = "${env}" ] || { echo "Tag environment ($tag_env) must match workflow environment: $env"; exit 1; }

          # Check if tag was created through the GitHub release interface
          [ "$release_tag" = "$tag_name" ] || { echo "Tag $tag_name was not created through the GitHub release interface. Exiting."; exit 1; }
        shell: bash

      - name: Check main branch
        if: inputs.env != 'dev'
        run: |
          branch=$(echo "${{github.event.base_ref}}" | sed -E 's/refs\/heads\///')
          echo branch=$branch
          [ "$branch" = "main" ] || { echo "This tag is not from the main branch. Exiting."; exit 1; }
        shell: bash

      - name: Terraform apply
        run: |
          echo terraform init -input=false -backend-config="key=terraform/deployments/${env}/terraform.tfstate"
          echo terraform apply -auto-approve -input=false -var="env=${env}"
        shell: bash
