name: Packages build steps
description: Installs, lints, tests, builds and packages code
inputs:
  package:
    description: Name of package
    required: true
  packages-folder:
    description: Name of packages folder relative to root (e.g. packages, services, lambdas)
    required: false
    default: "./packages"
  skip-steps:
    description: Steps to skip from 'Install, Lint, Test, Build, Prune, Zip, Upload'
    required: false
    default: ""
  include:
    description: a list of path patterns below the package root folder to restrict
      the scope of files included in zip e.g. {functions,lib}
    required: false
    default: ""
  exclude:
    description: a path pattern to exclude from zip
    required: false
    default: ""
  jfrog-mid-auth:
    description: This is the jfrog auth token generated by `echo "$JFROG_USER:$JFROG_PASS" | base64 --encode`
    required: true

runs:
  using: composite
  steps:
    - name: Calc package path
      run: |
        JOINED="${{ inputs.packages-folder || 'packages' }}/${{ inputs.package }}"
        echo "PACKAGE_DIR=${JOINED//\/\//\/}" >> $GITHUB_ENV
        echo "PACKAGE_NAME=${{ inputs.package }}-$GITHUB_SHA" >> $GITHUB_ENV
      shell: bash

    - name: Cached
      id: build-cache
      uses: actions/cache@v4
      with:
        key: ${{ env.PACKAGE_NAME }}-${{ env.ENV }}-${{ env.DASHBOARD_CLIENT_ID }}
        path: ${{ env.PACKAGE_NAME }}.zip

    - name: "Use Node.js ${{ env.NODE_VERSION }}"
      if: steps.build-cache.outputs.cache-hit != 'true'
      uses: actions/setup-node@v4
      with:
        node-version: "${{ env.NODE_VERSION }}"
        cache: "npm"

    - name: Create npmrc for accessing @mid
      if: steps.build-cache.outputs.cache-hit != 'true'
      uses: ./.github/actions/npmrc
      with:
        jfrog-mid-auth: ${{ inputs.jfrog-mid-auth }}

    - name: Install root
      if: ${{ !contains(inputs.skip-steps,'Install') && steps.build-cache.outputs.cache-hit != 'true' }}
      run: npm ci
      shell: bash

    - name: Install
      if: ${{ !contains(inputs.skip-steps,'Install') && steps.build-cache.outputs.cache-hit != 'true' }}
      working-directory: ${{ env.PACKAGE_DIR }}
      run: |
        npm ci --workspaces=false --install-links
      shell: bash

    - name: Audit
      if: ${{ !contains(inputs.skip-steps,'Audit') && steps.build-cache.outputs.cache-hit != 'true' }}
      working-directory: ${{ env.PACKAGE_DIR }}
      run: npm audit --omit=dev --audit-level=critical
      shell: bash

    - name: Lint
      if: ${{ !contains(inputs.skip-steps,'Lint') && steps.build-cache.outputs.cache-hit != 'true' }}
      working-directory: ${{ env.PACKAGE_DIR }}
      run: npm run lint
      shell: bash

    - name: Test
      if: ${{ !contains(inputs.skip-steps,'Test') && steps.build-cache.outputs.cache-hit != 'true' }}
      working-directory: ${{ env.PACKAGE_DIR }}
      run: |
        COVERAGE=$(npm -s test)
        if [ -n "$COVERAGE" ]; then
          echo "**Coverage report**" >> $GITHUB_STEP_SUMMARY
          echo "<pre style=\"font-size: x-small;\">$COVERAGE</pre>" >> $GITHUB_STEP_SUMMARY
        fi
        echo $COVERAGE
      shell: bash

    - name: Build
      if: ${{ !contains(inputs.skip-steps,'Build') && steps.build-cache.outputs.cache-hit != 'true' }}
      working-directory: ${{ env.PACKAGE_DIR }}
      run: npm run build
      shell: bash

    - name: Prune
      if: ${{ !contains(inputs.skip-steps,'Prune') && steps.build-cache.outputs.cache-hit != 'true' }}
      working-directory: ${{ env.PACKAGE_DIR }}
      run: |
        rm -fr node_modules
        npm ci --omit=dev --omit=optional --workspaces=false --install-links
        npm prune --production --workspaces=false --install-links
      shell: bash

    - name: Zip
      if: ${{ !contains(inputs.skip-steps,'Zip') && steps.build-cache.outputs.cache-hit != 'true' }}
      run: |
        dir=$PWD
        cd ${{ env.PACKAGE_DIR }}
        zip -r ${PACKAGE_NAME}.zip {package.json,dist} ${{ inputs.include }} \
        -x "**/*.{md,txt,ts}" -x "**/{READ*,LICEN*,CHANG*,test/*,*lock.*}" \
        -x "${{ inputs.exclude }}"
        mv $PACKAGE_NAME.zip $dir
      shell: bash

    - name: PostZip
      if: ${{ !contains(inputs.skip-steps,'Zip') }}
      run: |
        ls -alh
        du -hs ${PACKAGE_NAME}.zip
      shell: bash

    - name: Assume role
      if: ${{ !contains(inputs.skip-steps,'Upload') && steps.build-cache.outputs.cache-hit != 'true' }}
      uses: ./.github/actions/role
      with:
        environment: ${{ env.ENV }}

    - name: Upload to S3
      if: ${{ !contains(inputs.skip-steps,'Upload') && steps.build-cache.outputs.cache-hit != 'true' }}
      run: |
        aws s3 cp ${PACKAGE_NAME}.zip s3://mid-sso-hand-${{ env.ENV }}-deployment-bucket/${{ github.repository }}/packages/${PACKAGE_NAME}.zip
      shell: bash
